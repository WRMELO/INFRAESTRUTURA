version: "3.8"

services:
  # API Gateway
  api-gateway:
    image: api-gateway:latest
    ports:
      - "8000:8000"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  # Jupyter Notebook (CPU)
  jupyter-cpu:
    image: jupyter-cpu:latest
    ports:
      - "8888:8888"
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      JUPYTER_TOKEN: "senhasegura"
    volumes:
      - /home/wrm/INFRAESTRUTURA:/home/jovyan/work
      - /home/wrm/.config/rclone:/home/jovyan/.config/rclone:ro
      - /home/wrm/.config/drive-ingest:/home/jovyan/.config/drive-ingest:ro
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  # Jupyter Notebook (GPU)
  jupyter-gpu:
    image: jupyter-gpu:latest
    ports:
      - "8889:8888"
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      JUPYTER_TOKEN: "senhasegura"
    volumes:
      - /home/wrm/INFRAESTRUTURA:/home/jovyan/work
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker

  # Data Processing
  data-processing:
    image: data-processing:latest
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  # Data Visualization
  data-visualization:
    image: data-visualization:latest
    ports:
      - "8050:8050"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  # PostgreSQL (RAW, META, STAGING, CURATED, DATALAKE)
  database-services:
    image: database-services:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: senhasegura
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  # Vector Database (adicionar persistência conforme necessário)
  vector-database:
    image: vector-database:latest
    ports:
      - "8200:8200"
    # volumes:
    #   - vector_data:/path/to/vector/data
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  # MinIO (RAW file store)
  minio:
    image: minio:latest
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: senhasegura
    ports:
      - "9000-9001:9000-9001"
    volumes:
      - minio_data:/data
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  # ML Training (future GPU workloads)
  ml-training:
    image: ml-training:latest
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  # LLM Services
  llm-services:
    image: llm-services:latest
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  # Web Services (frontend)
  web-services:
    image: web-services:latest
    ports:
      - "80:80"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

networks:
  default:
    driver: overlay
    attachable: true

volumes:
  db_data:
  minio_data:

